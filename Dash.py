# -*- coding: utf-8 -*-
"""Untitled26.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11kDNFAIU3biAHBr56ctTKi7tgK3j_Jen
"""

import pandas as pd
import numpy as np

data=pd.read_csv("dataset_part_2.csv")

data.head(5)

!pip install dash==2.9.3
!pip install dash-bootstrap-components==1.3.1

import dash
import dash_html_components as html
import dash_core_components as dcc
from dash.dependencies import Input, Output

import plotly.express as px  # Import plotly.express for plotting


# Check for typos in the column name and correct if necessary
if 'Launch Site' not in data.columns:
    # Try likely alternatives
    if 'LaunchSite' in data.columns:
        correct_column = 'LaunchSite'
    elif 'launch_site' in data.columns:
        correct_column = 'launch_site'
    else:
        # If no close match is found, print available columns for inspection
        print("Available columns:", data.columns)
        correct_column = None  # Set to None to indicate no match found

app = dash.Dash(__name__)

app.layout = html.Div([
    dcc.Dropdown(
        id='launch-site-dropdown',
        # Use the corrected column name if found, otherwise handle the missing column
        options=[{'label': i, 'value': i} for i in data[correct_column].unique()] if correct_column else [],
        value='All Sites',
        placeholder='Select a Launch Site'
    ),
    dcc.Graph(id='success-pie-chart')  # Add a Graph component
])

@app.callback(
    Output(component_id='success-pie-chart', component_property='figure'),
    Input(component_id='launch-site-dropdown', component_property='value')
)
def render_pie_chart(selected_site):
    if selected_site == 'All Sites':
        filtered_data = data
    else:
        filtered_data = data[data[correct_column] == selected_site]

    # Calculate success rate
    success_rate = filtered_data['class'].mean()
    fig = px.pie(
        names=['Success', 'Failure'],
        values=[success_rate, 1 - success_rate],
        title=f'Success Rate for {selected_site}'
    )
    return fig

if __name__ == '__main__':
    app.run_server(debug=True)

app.layout = html.Div([
    dcc.Dropdown(
        id='launch-site-dropdown',
        options=[{'label': i, 'value': i} for i in data['Launch Site'].unique()],
        value='All Sites',
        placeholder='Select a Launch Site'
    ),
    dcc.RangeSlider(
        id='payload-slider',
        min=0,
        max=10000,
        step=1000,
        marks={i: str(i) for i in range(0, 10001, 2500)},
        value=[min(data['Payload Mass (kg)']), max(data['Payload Mass (kg)'])]
    ),
    dcc.Graph(id='success-payload-scatter-chart')
])

@app.callback(
    Output(component_id='success-payload-scatter-chart', component_property='figure'),
    [Input(component_id='launch-site-dropdown', component_property='value'),
     Input(component_id='payload-slider', component_property='value')]
)
def render_scatter_chart(selected_site, payload_range):
    if selected_site == 'All Sites':
        filtered_data = data
    else:
        filtered_data = data[data['Launch Site'] == selected_site]

    low, high = payload_range
    mask = (filtered_data['Payload Mass (kg)'] >= low) & (filtered_data['Payload Mass (kg)'] <= high)
    filtered_data = filtered_data[mask]

    fig = px.scatter(
        filtered_data,
        x='Payload Mass (kg)',
        y='class')